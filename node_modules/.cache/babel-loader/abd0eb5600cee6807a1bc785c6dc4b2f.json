{"ast":null,"code":"var _jsxFileName = \"/Users/itachi/Desktop/Albums-list/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { Routes, Route } from \"react-router-dom\";\nimport AddAlbum from './AddAlbum';\nimport AlbumsList from './AlbumsList'; // import Navbar from './Navbar'\n\nimport UpdateAlbum from './UpdateAlbum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      const albums = await fetch('https://jsonplaceholder.typicode.com/albums').then(response => response.json()).then(json => json);\n      this.setState({\n        albums\n      });\n    };\n\n    this.deleteAlbumFromList = id => {\n      fetch(`https://jsonplaceholder.typicode.com/albums/${id}`, {\n        method: 'DELETE'\n      });\n      const newAlbums = this.state.albums.filter(album => album.id !== id);\n      alert(\"Your Album Deleted successfully\");\n      this.setState({\n        albums: newAlbums\n      });\n    };\n\n    this.setUpdateAlbum = async album => {\n      this.setState({\n        updateAlbum: album\n      });\n    };\n\n    this.updateAlbumInList = async (id, updateTitle, updateUserid, oldAlbum) => {\n      const albums = this.state.albums;\n      const index = albums.indexOf(oldAlbum);\n      let updatedAlbum = [];\n\n      if (id < 100) {\n        updatedAlbum = await fetch(`https://jsonplaceholder.typicode.com/albums/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify({\n            userId: updateUserid,\n            id: id,\n            title: updateTitle\n          }),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8'\n          }\n        }).then(response => response.json()).then(json => json);\n      } else {\n        updatedAlbum = {\n          userId: updateUserid,\n          id: id,\n          title: updateTitle\n        };\n      }\n\n      albums[index] = updatedAlbum;\n      this.setState({\n        albums: albums\n      });\n      alert(\"Update Successfully done\");\n    };\n\n    this.addAlbumToList = (userId, title) => {\n      fetch('https://jsonplaceholder.typicode.com/albums', {\n        method: 'POST',\n        body: JSON.stringify({\n          userId: userId,\n          id: this.state.count,\n          title: title\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(response => response.json()).then(json => json);\n      const length = this.state.albums.length;\n      const lastId = this.state.albums[length - 1].id;\n      const album = {\n        userId: userId,\n        id: lastId + 1,\n        title: title\n      };\n      this.setState({\n        albums: [...this.state.albums, album]\n      });\n      alert(\"New Album added successfully in the bottom\");\n    };\n\n    this.state = {\n      albums: [],\n      updateAlbum: {}\n    };\n  } // this function call first time when app render\n\n\n  //--------------------------------------------------------------------------------------------------------\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(AlbumsList, {\n            albums: this.state.albums,\n            setUpdateAlbum: this.setUpdateAlbum,\n            deleteAlbumFromList: this.deleteAlbumFromList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/add-album\",\n          element: /*#__PURE__*/_jsxDEV(AddAlbum, {\n            addAlbumToList: this.addAlbumToList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/update-album\",\n          element: /*#__PURE__*/_jsxDEV(UpdateAlbum, {\n            album: this.state.updateAlbum,\n            updateAlbumInList: this.updateAlbumInList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"names":["React","Component","Routes","Route","AddAlbum","AlbumsList","UpdateAlbum","App","constructor","componentDidMount","albums","fetch","then","response","json","setState","deleteAlbumFromList","id","method","newAlbums","state","filter","album","alert","setUpdateAlbum","updateAlbum","updateAlbumInList","updateTitle","updateUserid","oldAlbum","index","indexOf","updatedAlbum","body","JSON","stringify","userId","title","headers","addAlbumToList","count","length","lastId","render"],"sources":["/Users/itachi/Desktop/Albums-list/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Routes, Route } from \"react-router-dom\";\nimport AddAlbum from './AddAlbum';\nimport AlbumsList from './AlbumsList';\n// import Navbar from './Navbar'\nimport UpdateAlbum from './UpdateAlbum';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      albums: [],\n      updateAlbum: {}\n    }\n  }\n\n  // this function call first time when app render\n  componentDidMount = async () => {\n    const albums = await fetch('https://jsonplaceholder.typicode.com/albums')\n      .then((response) => response.json())\n      .then((json) => json);\n    this.setState({\n      albums\n    })\n  }\n\n  // setLastId=()=>{\n  //   const length=this.state.albums.length;\n  //   const lastId=this.state.albums[length-1].id;\n  //   this.setState({\n  //     lastId:lastId\n  //   })\n  //   console.log(this.state.lastId);\n  // }\n\n\n  //delete album function-----------------------------------------------------------------------------------\n  //this function take album id from albums list and then delete the album from albums list and update state\n  deleteAlbumFromList = (id) => {\n    fetch(`https://jsonplaceholder.typicode.com/albums/${id}`, { method: 'DELETE', })\n    const newAlbums = this.state.albums.filter((album) => album.id !== id);\n    alert(\"Your Album Deleted successfully\");\n    this.setState({\n      albums: newAlbums,\n    })\n  }\n  //---------------------------------------------------------------------------------------------------------\n\n\n  //update album functions------------------------------------------------------------------------------------\n  //this function take album object from albums list and set state for update album\n  setUpdateAlbum = async (album) => {\n    this.setState({\n      updateAlbum: album\n    })\n  }\n  //this function take album id, updateTitle, updateUserid, oldAlbum and then update and set state \n  updateAlbumInList = async (id, updateTitle, updateUserid, oldAlbum) => {\n    const albums = this.state.albums;\n    const index = albums.indexOf(oldAlbum);\n    let updatedAlbum = [];\n    if (id < 100) {\n      updatedAlbum = await fetch(`https://jsonplaceholder.typicode.com/albums/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          userId: updateUserid,\n          id: id,\n          title: updateTitle,\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      }).then((response) => response.json()).then((json) => json);\n    } else {\n      updatedAlbum = {\n        userId: updateUserid,\n        id: id,\n        title: updateTitle\n      }\n    }\n    albums[index] = updatedAlbum;\n    this.setState({\n      albums: albums\n    })\n    alert(\"Update Successfully done\")\n  }\n  //--------------------------------------------------------------------------------------------------------\n\n  //add album function--------------------------------------------------------------------------------------\n  //this function take userid and title from input and then added to the bottom of the albums list\n  addAlbumToList = (userId, title) => {\n    fetch('https://jsonplaceholder.typicode.com/albums', {\n      method: 'POST',\n      body: JSON.stringify({\n        userId: userId,\n        id: this.state.count,\n        title: title,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    }).then((response) => response.json()).then((json) => json);\n    const length = this.state.albums.length;\n    const lastId = this.state.albums[length - 1].id;\n    const album = {\n      userId: userId,\n      id: lastId + 1,\n      title: title,\n    }\n    this.setState({\n      albums: [...this.state.albums, album]\n    })\n    alert(\"New Album added successfully in the bottom\");\n  }\n  //--------------------------------------------------------------------------------------------------------\n\n\n  render() {\n    return (\n      <>\n        <Routes>\n          <Route path='/' element={<AlbumsList albums={this.state.albums} setUpdateAlbum={this.setUpdateAlbum} deleteAlbumFromList={this.deleteAlbumFromList} />}></Route>\n          <Route path='/add-album' element={<AddAlbum addAlbumToList={this.addAlbumToList} />}></Route>\n          <Route path='/update-album' element={<UpdateAlbum album={this.state.updateAlbum} updateAlbumInList={this.updateAlbumInList} />}></Route>\n        </Routes>\n      </>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}